{"version":3,"sources":["algorithms/Merge.js","components/SortingVisualiser.js","algorithms/Insertion.js","App.js","serviceWorker.js","index.js"],"names":["Merge","unSortedArray","animations","length","auxArray","slice","Helper","mainArray","startInd","endInd","middle","Math","floor","k","i","j","push","mergeSort","SortingVisualiser","useState","myArray","setmyArray","className","map","value","ind","style","height","key","onClick","index","randomIntValuesfromInterval","console","log","arrayBars","document","getElementsByClassName","backgroundColor","JSON","stringify","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","mAnimations","unsortedArray","forEach","element","nextNum","currentNum","isPermute","Insertion","nulls","arrayBarInd","barStyle","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7c8966c.chunk.js","sourcesContent":["\r\n\r\nexport default function Merge(unSortedArray) {\r\n\r\n    const animations = [];    \r\n    if(unSortedArray.length <= 1) return unSortedArray;\r\n    const auxArray  = unSortedArray.slice();\r\n\r\n    Helper(unSortedArray, 0, unSortedArray.length -1, auxArray, animations);\r\n    \r\n    return animations;\r\n}\r\n\r\n\r\nfunction Helper(mainArray, startInd, endInd, auxArray, animations){\r\n\r\n    \r\n    if(startInd === endInd) return;\r\n\r\n    const middle = Math.floor((startInd + endInd)/2);\r\n    Helper(auxArray, startInd, middle, mainArray, animations);\r\n    Helper(auxArray, middle + 1, endInd, mainArray, animations);\r\n    mergeSort(mainArray, startInd, middle, endInd, auxArray, animations)    \r\n\r\n}\r\n\r\n\r\nfunction mergeSort(mainArray, startInd, middle, endInd, auxArray, animations){\r\n\r\n    let k = startInd;\r\n  let i = startInd;\r\n  let j = middle + 1;\r\n  while (i <= middle && j <= endInd) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxArray[i]]);\r\n      mainArray[k++] = auxArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxArray[j]]);\r\n      mainArray[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while (i <= middle) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxArray[i]]);\r\n    mainArray[k++] = auxArray[i++];\r\n  }\r\n  while (j <= endInd) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxArray[j]]);\r\n    mainArray[k++] = auxArray[j++];\r\n  }\r\n\r\n\r\n}","import React, { useState } from \"react\";\r\nimport Merge from \"../algorithms/Merge\";\r\nimport Insertion from \"../algorithms/Insertion\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nexport default function SortingVisualiser() {\r\n  var [myArray, setmyArray] = useState([\"\"]);\r\n\r\n  const generateRandomValuesForArray = () => {\r\n    myArray = [];\r\n    for (let index = 0; index < 200; index++) {\r\n      myArray.push(randomIntValuesfromInterval(5, 600));\r\n    }\r\n    console.log(myArray.length);\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let index = 0; index < arrayBars.length; index++) {\r\n      const barStyle = arrayBars[index].style;\r\n      barStyle.backgroundColor = \"darkorange\";\r\n    }\r\n    setmyArray(myArray);\r\n  };\r\n\r\n  const insertionSort = () => {\r\n\r\n    const mAnimations = Insertion(myArray);\r\n    for (let index = 0; index < mAnimations.length; index++) {\r\n        // console.log(JSON.stringify(mAnimations[index]));        \r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        const color = mAnimations[index].length === 3 ? SECONDARY_COLOR : 'blue';\r\n        if(mAnimations[index].length === 3){\r\n            console.log(JSON.stringify(\"3         \",mAnimations[index]));\r\n\r\n            const [barOneIdx, barTwoIdx,nulls] = mAnimations[index];\r\n            console.log(nulls);\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n\r\n            }, index* ANIMATION_SPEED_MS)            \r\n        }\r\n        else{\r\n            console.log(JSON.stringify(\"2         \",mAnimations[index]));\r\n            \r\n            const [arrayBarInd, newHeight] = mAnimations[index];\r\n            const barStyle = arrayBars[arrayBarInd].style;\r\n            setTimeout(() =>{\r\n            barStyle.backgroundColor = color;\r\n            barStyle.height = `${newHeight}px`;         \r\n            }, index * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n  };\r\n\r\n  const mergeSort = () => {\r\n    const animations = Merge(myArray);\r\n    console.log(JSON.stringify(animations));\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"array-container\">\r\n        {myArray.map((value, ind) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            style={{ height: `${value}px` }}\r\n            key={ind}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={generateRandomValuesForArray}>New array</button>\r\n      <button onClick={mergeSort}>Merge Sort</button>\r\n      <button onClick={insertionSort}>Insertion Sort</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst randomIntValuesfromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n","export default function insertionSort(unsortedArray) {\r\n  const animations = [];\r\n\r\n  unsortedArray.forEach((element, i) => {\r\n    let currentNum = unsortedArray[i];\r\n    let nextNum;\r\n    let isPermute = false;\r\n    for (\r\n      nextNum = i - 1;\r\n      nextNum >= 0 && unsortedArray[nextNum] > currentNum;\r\n      nextNum--\r\n    ) {\r\n        isPermute = true;\r\n      animations.push([i, nextNum, null]);\r\n      animations.push([nextNum + 1, unsortedArray[nextNum]]);\r\n      unsortedArray[nextNum + 1] = unsortedArray[nextNum];\r\n    }\r\n    \r\n    isPermute && animations.push([nextNum + 1, currentNum]);\r\n    unsortedArray[nextNum + 1] = currentNum;\r\n  });\r\n\r\n  return animations;\r\n}\r\n","import React from 'react';\nimport SortingVisualiser from './components/SortingVisualiser'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualiser/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}